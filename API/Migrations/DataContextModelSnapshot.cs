// <auto-generated />
using System;
using API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace API.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.8")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("API.Models.Atendimento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DataExecucao")
                        .HasColumnType("datetime2");

                    b.Property<string>("NomeCliente")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Observacao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TecnicoNome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TipoDeAtendimentoTipo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Atendimentos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DataExecucao = new DateTime(2021, 8, 9, 13, 45, 0, 0, DateTimeKind.Unspecified),
                            NomeCliente = "Maria Aparecida",
                            Observacao = "Resolvido",
                            TecnicoNome = " Ana Couto",
                            TipoDeAtendimentoTipo = "Telefone"
                        });
                });

            modelBuilder.Entity("API.Models.Gestor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Senha")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Gestores");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nome = "Joaguim Pedrosa",
                            Senha = "qwe345"
                        });
                });

            modelBuilder.Entity("API.Models.Login", b =>
                {
                    b.Property<int>("TecnicoId")
                        .HasColumnType("int");

                    b.Property<int>("GestorId")
                        .HasColumnType("int");

                    b.Property<string>("GestrorSenha")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TecnicoSenha")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TecnicoId", "GestorId");

                    b.HasIndex("GestorId")
                        .IsUnique();

                    b.HasIndex("TecnicoId")
                        .IsUnique();

                    b.ToTable("Login");
                });

            modelBuilder.Entity("API.Models.Tecnico", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<int?>("GestorId")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Senha")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GestorId");

                    b.ToTable("Tecnicos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Ativo = true,
                            Nome = " Francisco Couto",
                            Senha = "asd123"
                        },
                        new
                        {
                            Id = 2,
                            Ativo = true,
                            Nome = " Ana Couto",
                            Senha = "fgh456"
                        },
                        new
                        {
                            Id = 3,
                            Ativo = true,
                            Nome = " Arthur Menezes",
                            Senha = "jkl789"
                        },
                        new
                        {
                            Id = 4,
                            Ativo = true,
                            Nome = " Flavia Santos",
                            Senha = "zxc012"
                        });
                });

            modelBuilder.Entity("API.Models.TipoDeAtendimento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AtendimentoId")
                        .HasColumnType("int");

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<int?>("GestorId")
                        .HasColumnType("int");

                    b.Property<string>("Tipo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AtendimentoId");

                    b.HasIndex("GestorId");

                    b.ToTable("TiposDeAtendimento");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Ativo = true,
                            Tipo = "Presencial"
                        },
                        new
                        {
                            Id = 2,
                            Ativo = true,
                            Tipo = "Telefone"
                        },
                        new
                        {
                            Id = 3,
                            Ativo = true,
                            Tipo = "Email"
                        },
                        new
                        {
                            Id = 4,
                            Ativo = true,
                            Tipo = "Chat"
                        },
                        new
                        {
                            Id = 5,
                            Ativo = true,
                            Tipo = "Redes Sociais"
                        });
                });

            modelBuilder.Entity("AtendimentoTecnico", b =>
                {
                    b.Property<int>("AtendimentosId")
                        .HasColumnType("int");

                    b.Property<int>("TecnicosId")
                        .HasColumnType("int");

                    b.HasKey("AtendimentosId", "TecnicosId");

                    b.HasIndex("TecnicosId");

                    b.ToTable("AtendimentoTecnico");
                });

            modelBuilder.Entity("API.Models.Login", b =>
                {
                    b.HasOne("API.Models.Gestor", "Gestor")
                        .WithOne("Login")
                        .HasForeignKey("API.Models.Login", "GestorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.Tecnico", "Tecnico")
                        .WithOne("Login")
                        .HasForeignKey("API.Models.Login", "TecnicoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gestor");

                    b.Navigation("Tecnico");
                });

            modelBuilder.Entity("API.Models.Tecnico", b =>
                {
                    b.HasOne("API.Models.Gestor", "Gestor")
                        .WithMany("Tecnicos")
                        .HasForeignKey("GestorId");

                    b.Navigation("Gestor");
                });

            modelBuilder.Entity("API.Models.TipoDeAtendimento", b =>
                {
                    b.HasOne("API.Models.Atendimento", "Atendimento")
                        .WithMany("TiposDeAtendimentos")
                        .HasForeignKey("AtendimentoId");

                    b.HasOne("API.Models.Gestor", "Gestor")
                        .WithMany("TiposDeAtendimentos")
                        .HasForeignKey("GestorId");

                    b.Navigation("Atendimento");

                    b.Navigation("Gestor");
                });

            modelBuilder.Entity("AtendimentoTecnico", b =>
                {
                    b.HasOne("API.Models.Atendimento", null)
                        .WithMany()
                        .HasForeignKey("AtendimentosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.Tecnico", null)
                        .WithMany()
                        .HasForeignKey("TecnicosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("API.Models.Atendimento", b =>
                {
                    b.Navigation("TiposDeAtendimentos");
                });

            modelBuilder.Entity("API.Models.Gestor", b =>
                {
                    b.Navigation("Login");

                    b.Navigation("Tecnicos");

                    b.Navigation("TiposDeAtendimentos");
                });

            modelBuilder.Entity("API.Models.Tecnico", b =>
                {
                    b.Navigation("Login");
                });
#pragma warning restore 612, 618
        }
    }
}
